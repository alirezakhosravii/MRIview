import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt

class NIFTIViewer(tk.Tk):
    def __init__(self, filepath, orientation='axial'):
        super().__init__()
        self.title("NIfTI Slice Viewer")
        
        self.data = nib.load(filepath).get_fdata()
        self.orientation = orientation
        
        # Determine slice orientation
        self.num_slices = self.data.shape[self.get_slice_axis()]
        self.current_slice = self.num_slices // 2
        
        # Set up the GUI
        self.setup_gui()
        self.update_image()

    def get_slice_axis(self):
        if self.orientation == 'axial':
            return 2
        elif self.orientation == 'sagittal':
            return 0
        elif self.orientation == 'coronal':
            return 1

    def get_slice(self, slice_num):
        if self.orientation == 'axial':
            return np.rot90(self.data[:, :, slice_num])
        elif self.orientation == 'sagittal':
            return np.rot90(self.data[slice_num, :, :])
        elif self.orientation == 'coronal':
            return np.rot90(self.data[:, slice_num, :])

    def setup_gui(self):
        self.slider = ttk.Scale(self, from_=0, to=self.num_slices-1, orient=tk.HORIZONTAL, command=self.slider_moved)
        self.slider.set(self.current_slice)
        self.slider.pack(fill=tk.X, expand=True)

        self.image_label = tk.Label(self)
        self.image_label.pack(padx=10, pady=10)

    def slider_moved(self, event):
        self.current_slice = int(float(event))
        self.update_image()

    def update_image(self):
        slice_img = self.get_slice(self.current_slice)
        slice_img = (slice_img / np.max(slice_img) * 255).astype(np.uint8)  # Normalize and convert to uint8
        img = Image.fromarray(slice_img)
        imgtk = ImageTk.PhotoImage(image=img)
        self.image_label.imgtk = imgtk
        self.image_label.configure(image=imgtk)

# Usage example
filepath = "/Users/Downloads/1.nii"
app = NIFTIViewer(filepath, 'axial')
app.mainloop()
